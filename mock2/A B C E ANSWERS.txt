A

c++

#include<iostream>
using namespace std;
int main()
{
  int len;
  cin>>len;
  string ammai,abbai;
  bool flag=false;
  cin>>ammai>>abbai;
  for(int i=0;i<len;i++)
  {
    char ch=ammai[i];
    if(abbai.find(ch)!=string::npos)
    {
      abbai.erase(abbai.find(ch),1);
    }
    else
    {
      cout<<abbai.length();
      flag=true;
      break;
    }
  }
  if(!flag)
  {
    cout<<"0";
  }
  return 0;
}





-----------------------------------------------------------------------------

B

c++




#include<iostream>

using namespace std;

int bit_score(int n) {
 int a, b, c, largest, smallest;
 int score;

 a = n%10; n/=10;
 b = n%10; n/=10;
 c = n%10; n/=10;

 largest = (a>b)?a:b;
 largest = (c>largest)?c:largest;
 smallest = (a<b)?a:b;
 smallest = (c<smallest)?c:smallest;

 score = largest*11 + smallest*7;

 score = score % 100;
 return score;
}

int findPairs (int score_array[], int N) {
 int sig_dig[10], i, pairs = 0, msb;

 for(i=0; i<10; i++) {
  sig_dig[i] = 0;
 }

 for(i=0; i<N; i=i+2) {
  msb = score_array[i] / 10;
        for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
  
 }
    
    for(i=1; i<N; i=i+2) {
  msb = score_array[i] / 10;
  for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
 }

 for(i=0; i<10; i++) {
  pairs = pairs + sig_dig[i];
 }

 return pairs;
}


int main() {

 int N, i;
 int ip_array[501];
 int score_array[501];
 int pairs;
 cin>>N;

 for(i=0; i<N; i++) {
  cin>>ip_array[i];
 }

 for(i=0; i<N; i++) {
  score_array[i] = bit_score(ip_array[i]);
 }

 pairs = findPairs(score_array, N);
 cout<<pairs;

 return 0;
}



----------------------------------------------------------------------------------


C


py







m, n, p, q = raw_input().split(":")
ll = int
bb = int
count = 0

def cadbury(m, n, p, q):
    leng = [m, n]
    brd = [p, q]
    for l in leng:
        for b in brd:
            call(l, b)

def call(l, b):
    #print l,b
    global count
    area = l * b
    if l > b:
        bb = l
        rem = bb - b
        #print rem
        rem_part1 = rem
        #print rem_part1
        rem_part2 = b
        #print rem_part2
        l = rem_part1
        #print l
        b = rem_part2
        #print b
        if l != b:
            if (l==1) or (b==1):
                count += 1
                count += (l*b)
                #print count
                return
            else:
                count += 1
                #print count
                call(l, b)
        if l==b:
            count+=2
            #print count
            return
    elif b > l:
        ll = b
        #print ll
        rem = ll - l
        #print rem
        rem_part1 = rem
        #print rem_part1
        rem_part2 = l
        #print rem_part2
        l = rem_part1
        #print l
        b = rem_part2
        #print b
        if l != b:
            if (l==1) or (b==1):
                count += 1
                count += (l*b)
                #print count
                return
            else:
                count += 1
                #print count
                call(l, b)
        if l==b:
            count+=2
            #print count
            return
cadbury(int(m), int(n), int(p), int(q))
print count



-----------------------------------------------------------------------------------

E


language-c




#include<stdio.h>
long long int gcd(long long int a,long long int b)
{
  if(b==0)
    return a;
  else
    return gcd(b,a%b);
}
int main()
{
  long long int t,n,i,res,c,temp,temp1;
  scanf("%lld",&t);
  while(t--)
  {
    scanf("%lld",&n);
    long long int a[n];
    for(i=0;i<n;i++)
      scanf("%lld",&a[i]);
    i=0;
    res=1;
    c=0;
    while(i<=n-1)
    {
      temp1=i;
      c=0;
      while(a[i]!=0)
      {
        temp=i;//4
        i=a[i]-1;//0
        a[temp]=0;//0
        c+=1;//3
      }
      i=temp1+1;
      if(c!=0)
        res=res*c/gcd(res,c);
    }
    printf("%lld\n",res);
  }
  return 0;
}




------------------------------------------------------------------------------
