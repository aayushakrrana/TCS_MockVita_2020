
A:-

n=int(input())
bride=list(input())
groom=list(input())
for i in bride:
    if i in groom:
        groom.remove(i)
    else:
        break
print (len(groom),end="")



B:-



#include<iostream>

using namespace std;

int bit_score(int n) {
 int a, b, c, largest, smallest;
 int score;

 a = n%10; n/=10;
 b = n%10; n/=10;
 c = n%10; n/=10;

 largest = (a>b)?a:b;
 largest = (c>largest)?c:largest;
 smallest = (a<b)?a:b;
 smallest = (c<smallest)?c:smallest;

 score = largest*11 + smallest*7;

 score = score % 100;
 return score;
}

int findPairs (int score_array[], int N) {
 int sig_dig[10], i, pairs = 0, msb;

 for(i=0; i<10; i++) {
  sig_dig[i] = 0;
 }

 for(i=0; i<N; i=i+2) {
  msb = score_array[i] / 10;
        for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
  
 }
    
    for(i=1; i<N; i=i+2) {
  msb = score_array[i] / 10;
  for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
 }

 for(i=0; i<10; i++) {
  pairs = pairs + sig_dig[i];
 }

 return pairs;
}


int main() {

 int N, i;
 int ip_array[501];
 int score_array[501];
 int pairs;
 cin>>N;

 for(i=0; i<N; i++) {
  cin>>ip_array[i];
 }

 for(i=0; i<N; i++) {
  score_array[i] = bit_score(ip_array[i]);
 }

 pairs = findPairs(score_array, N);
 cout<<pairs;

 return 0;
}


C:-



#include<stdio.h>
int no_of_children(int row, int col)
{
    int count=0;
    int total = row * col;
    while(row && col)
    {
        count++;
        if(row>col)
            row = row - col;
        else
            col = col - row;
    }
    return count;
}
int main()
{
    int sum=0;
    int minlen,maxlen,minwid,maxwid;
    scanf("%d\n%d\n%d\n%d",&minlen,&maxlen,&minwid,&maxwid);
    if(0<minlen<1501 && 0<maxlen<1501 && 0<minwid<1501 && 0<maxwid<1501)
    {
        for(int i=minlen;i<=maxlen;i++)
        {
            for(int j=minwid;j<=maxwid;j++)
            {
                sum = sum + no_of_children(i,j);
            }
        }
        printf("%d",sum);
    }
    return 0;
}


E:-


#include<stdio.h>
long long int gcd(long long int a,long long int b)
{
  if(b==0)
    return a;
  else
    return gcd(b,a%b);
}
int main()
{
  long long int t,n,i,res,c,temp,temp1;
  scanf("%lld",&t);
  while(t--)
  {
    scanf("%lld",&n);
    long long int a[n];
    for(i=0;i<n;i++)
      scanf("%lld",&a[i]);
    i=0;
    res=1;
    c=0;
    while(i<=n-1)
    {
      temp1=i;
      c=0;
      while(a[i]!=0)
      {
        temp=i;//4
        i=a[i]-1;//0
        a[temp]=0;//0
        c+=1;//3
      }
      i=temp1+1;
      if(c!=0)
        res=res*c/gcd(res,c);
    }
    printf("%lld\n",res);
  }
  return 0;
}
//groovingMonkey




F:-(ONLY SAMPLE CASE)
from math import gcd, factorial, floor, ceil
from fractions import Fraction
import operator as op
from functools import reduce

def nCr(n, r):
    r = min(r, n-r)
    numer = reduce(op.mul, range(n, n-r, -1), 1)
    denom = reduce(op.mul, range(1, r+1), 1)
    return Fraction(numer,denom)

T = int(input().strip())
for _ in range(T):
  A, H, L1, L2, M, C = tuple(map(int,input().strip().split()))
  special_needed, L = ceil((H-M*A)/C), Fraction(L1,L2)

  count = Fraction(0)
  for k in range(special_needed,M+1):
    count += nCr(M,k)*L**k*(1-L)**(M-k)

  p1,p2 = count.numerator, count.denominator
  if p1==0:
    print('RIP')
  else:
    _ = gcd(p1,p2)
    print('{}/{}'.format(p1//_,p2//_))